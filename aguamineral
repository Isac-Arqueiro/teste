<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Loja Offline - Cliente</title>
  <link rel="manifest" id="manifest-link">

  <style>
    * { box-sizing: border-box; }
    body {
      font-family: Arial, sans-serif;
      background: #f2f2f2;
      padding: 20px;
      margin: 0;
    }
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: #fff;
      padding: 15px 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    h1 {
      margin: 0;
      font-size: 22px;
    }
    #config-btn {
      font-size: 14px;
      background: #eee;
      border: none;
      padding: 5px 10px;
      border-radius: 4px;
      cursor: pointer;
    }
    #cliente {
      margin: 20px 0 10px;
      padding: 10px;
      font-size: 18px;
      text-align: center;
    }
    .produto {
      background: #fff;
      display: flex;
      border-radius: 8px;
      margin-bottom: 15px;
      padding: 10px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .produto img {
      width: 100px;
      height: 100px;
      object-fit: contain;
      margin-right: 10px;
    }
    .produto-info {
      flex-grow: 1;
    }
    .produto-info input {
      width: 100%;
      padding: 6px;
      margin-bottom: 6px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    .valores {
      display: flex;
      justify-content: space-between;
    }
    .valores div {
      font-size: 14px;
    }
    #config {
      display: none;
      background: #fff;
      padding: 20px;
      margin-top: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    #config input, #config button {
      width: 100%;
      padding: 10px;
      margin: 8px 0;
      border: 1px solid #ccc;
      border-radius: 5px;
    }
    #config button {
      background: #333;
      color: white;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <header>
    <h1>Loja Offline</h1>
    <button id="config-btn" onclick="alternarConfig()">⚙️ Configuração</button>
  </header>

  <div id="cliente">
    <input type="text" id="nomeCliente" placeholder="Nome do cliente (opcional)">
  </div>

  <div id="produtos"></div>

  <!-- Configuração -->
  <div id="config">
    <h2>Adicionar Produto</h2>
    <form id="produto-form">
      <input type="text" id="nome" placeholder="Nome do Produto" required />
      <input type="number" id="preco" placeholder="Preço Unitário" required />
      <input type="text" id="icone" placeholder="URL/Base64 do Ícone" required />
      <button type="submit">Salvar Produto</button>
    </form>
  </div>

  <script>
    const DB_NAME = 'vendaDB';
    const STORE_NAME = 'produtos';
    let db;

    const PRODUTOS_INICIAIS = [
      {
        nome: "Água Boquinha",
        preco: 5.00,
        icone: "https://static.vecteezy.com/system/resources/previews/045/647/369/non_2x/water-gallon-sticker-illustration-free-png.png",
        quantidade: 1
      },
      {
        nome: "Água Mineral",
        preco: 4.50,
        icone: "https://static.vecteezy.com/system/resources/previews/045/647/369/non_2x/water-gallon-sticker-illustration-free-png.png",
        quantidade: 1
      }
    ];

    function initDB() {
      const request = indexedDB.open(DB_NAME, 1);
      request.onupgradeneeded = e => {
        db = e.target.result;
        if (!db.objectStoreNames.contains(STORE_NAME)) {
          const store = db.createObjectStore(STORE_NAME, { keyPath: 'id', autoIncrement: true });
          store.transaction.oncomplete = () => {
            const tx = db.transaction(STORE_NAME, 'readwrite');
            const store = tx.objectStore(STORE_NAME);
            PRODUTOS_INICIAIS.forEach(p => store.add(p));
          };
        }
      };
      request.onsuccess = e => {
        db = e.target.result;
        carregarProdutos();
      };
    }

    function carregarProdutos() {
      const tx = db.transaction(STORE_NAME, 'readonly');
      const store = tx.objectStore(STORE_NAME);
      const request = store.getAll();
      request.onsuccess = () => {
        const produtos = request.result;
        const container = document.getElementById('produtos');
        container.innerHTML = '';

        produtos.forEach(prod => {
          const card = document.createElement('div');
          card.className = 'produto';

          card.innerHTML = `
            <img src="${prod.icone}" alt="${prod.nome}">
            <div class="produto-info">
              <input type="text" value="${prod.nome}" data-id="${prod.id}" data-field="nome" />
              <div class="valores">
                <div>
                  Preço:<br>
                  <input type="number" value="${prod.preco}" step="0.01" data-id="${prod.id}" data-field="preco" />
                </div>
                <div>
                  Quantidade:<br>
                  <input type="number" value="${prod.quantidade || 1}" min="1" data-id="${prod.id}" data-field="quantidade" />
                </div>
              </div>
              <div class="valores" style="margin-top: 10px;">
                <div>Unitário: R$ ${prod.preco.toFixed(2)}</div>
                <div>Total: R$ ${(prod.preco * (prod.quantidade || 1)).toFixed(2)}</div>
              </div>
            </div>
          `;

          // Eventos de alteração
          card.querySelectorAll('input').forEach(input => {
            input.addEventListener('change', (e) => {
              const id = parseInt(e.target.dataset.id);
              const field = e.target.dataset.field;
              const value = field === 'nome' ? e.target.value :
                            field === 'preco' ? parseFloat(e.target.value) :
                            parseInt(e.target.value);

              atualizarProduto(id, field, value);
            });
          });

          container.appendChild(card);
        });
      };
    }

    function atualizarProduto(id, campo, valor) {
      const tx = db.transaction(STORE_NAME, 'readwrite');
      const store = tx.objectStore(STORE_NAME);
      const getReq = store.get(id);
      getReq.onsuccess = () => {
        const produto = getReq.result;
        produto[campo] = valor;
        store.put(produto);
        carregarProdutos(); // recarrega para atualizar totais
      };
    }

    // Adicionar novo produto
    document.getElementById('produto-form').addEventListener('submit', (e) => {
      e.preventDefault();
      const nome = document.getElementById('nome').value;
      const preco = parseFloat(document.getElementById('preco').value);
      const icone = document.getElementById('icone').value;
      const quantidade = 1;

      const tx = db.transaction(STORE_NAME, 'readwrite');
      const store = tx.objectStore(STORE_NAME);
      store.add({ nome, preco, icone, quantidade });
      tx.oncomplete = () => {
        document.getElementById('produto-form').reset();
        carregarProdutos();
        alternarConfig();
      };
    });

    function alternarConfig() {
      const el = document.getElementById('config');
      el.style.display = el.style.display === 'block' ? 'none' : 'block';
    }

    // Manifesto PWA
    const manifest = {
      name: "Loja Offline",
      short_name: "Loja",
      start_url: ".",
      display: "standalone",
      background_color: "#ffffff",
      theme_color: "#000000",
      icons: [
        {
          src: "https://static.vecteezy.com/system/resources/previews/045/647/369/non_2x/water-gallon-sticker-illustration-free-png.png",
          sizes: "192x192",
          type: "image/png"
        }
      ]
    };
    const blob = new Blob([JSON.stringify(manifest)], { type: 'application/json' });
    document.getElementById('manifest-link').href = URL.createObjectURL(blob);

    // Service Worker PWA
    const swCode = `
      const CACHE_NAME = "venda-pwa";
      self.addEventListener("install", e => {
        e.waitUntil(caches.open(CACHE_NAME).then(c => c.addAll(["."])));
      });
      self.addEventListener("fetch", e => {
        e.respondWith(caches.match(e.request).then(r => r || fetch(e.request)));
      });
    `;
    const swBlob = new Blob([swCode], { type: 'application/javascript' });
    const swUrl = URL.createObjectURL(swBlob);
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register(swUrl);
    }

    window.onload = initDB;
  </script>
</body>
</html>
